######################################################################
# menu
######################################################################

[menu __main __temp __preheat_petg]
type: list
name: Preheat PETG

[menu __main __temp __preheat_petg __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S80
    M104 S220

[menu __main __temp __preheat_petg __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S220

[menu __main __temp __preheat_petg __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S80

[menu __main __temp __preheat_abs]
type: disabled

######################################################################
# template
######################################################################

[gcode_macro M73]
rename_existing: M73.0
variable_p: 0.0
variable_r: 0.0
gcode:
   {% set P = params.P|default(0)|int %}
   {% set R = params.R|default(0)|int %}
   M73.0 P{P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}

[display_template _remaining_time]
text:
  {% set ptime = printer["gcode_macro M73"].r %}
  { " R%02d:%02d" % (ptime // 60, ptime % 60) }

[display_template _printing_time]
text:
  {% set ptime = printer.idle_timeout.printing_time %}
  { " E%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_template _print_progress]
text:
  { " {:>4.0%}".format(printer.display_status.progress) }

[display_template _heater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { " %0.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_template _fan_speed]
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.idle_timeout.printing_time|int % 2) + 1 %}
      ~fan{frame}~
      { "{:>4.0%}".format(speed) }
    {% else %}
      ~fan1~ OFF
    {% endif %}
  {% endif %}

[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    {% set pos = printer.toolhead.position %}
    { "X{:+4.0f} Y{:+4.0f} Z{:>6.2f}".format(pos.x, pos.y, pos.z) }
  {% else %}
    Ready
  {% endif %}

[display_glyph fan1]
hd44780_slot: 6
hd44780_data:
  **...
  **..*
  .*.**
  ..*..
  ..*..
  **.*.
  *..**
  ...**

[display_glyph fan2]
hd44780_slot: 6
hd44780_data:
  .**..
  .**..
  ..*.*
  *****
  *.*..
  ..*..
  ..**.
  ..**.

[display_glyph speed]
hd44780_slot: 7
hd44780_data:
  ..***
  .*...
  *.*..
  *..**
  *...*
  *....
  .*...
  ..***

######################################################################
# 20x4 display
######################################################################

[display_data display_20x4 extruder]
position: 0, 0
text: { render("_heater_temperature", param_heater_name="extruder") }

[display_data display_20x4 heater_bed]
position: 0,11
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data display_20x4 print_progress]
position: 1, 0
text:
  ~clock~
  { render("_printing_time") }
  { render("_remaining_time") }
  { render("_print_progress") }

[display_data display_20x4 speed]
position: 2, 0
text:
  ~speed~
  { "{:>4.0f}mm/s".format(printer.motion_report.live_velocity) }

[display_data display_20x4 fan]
position: 2, 15
text: { render("_fan_speed") }

[display_data display_20x4 print_status]
position: 3, 0
text: { render("_print_status") }
